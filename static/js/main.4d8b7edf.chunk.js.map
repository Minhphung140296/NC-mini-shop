{"version":3,"sources":["Components/Header/Header.tsx","Components/Layout/Layout.tsx","Content/Button.tsx","Content/Content.tsx","Services/getProduct.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","useState","isOpen","Navbar","color","light","expand","NavbarBrand","href","Collapse","navbar","Nav","className","NavItem","NavLink","StyleLayout","Styled","div","Layout","props","children","StyledBtn","styled","button","Button","StyledContent","CardStyled","Card","data","name","id","image","src","alt","onClick","addToCard","Content","card","setCard","product","setProduct","useEffect","a","fetch","then","res","json","catch","err","console","log","Data","fetchProduct","map","pro","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4SAwCeA,EA9BA,WAAO,IAAD,EACSC,oBAAS,GADlB,mBACZC,EADY,UAKnB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,QACA,kBAACC,EAAA,EAAD,CAAUP,OAAQA,EAAQQ,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7B,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASN,KAAK,KAAd,SAEF,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASN,KAAK,KAAd,aAIJ,kBAACG,EAAA,EAAD,CAAKC,UAAU,KAAKF,QAAM,GACxB,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASN,KAAK,KAAd,e,iMC5Bd,IAAMO,EAAcC,IAAOC,IAAV,KAaFC,EAHuB,SAACC,GACvC,OAAO,kBAACJ,EAAD,KAAcI,EAAMC,W,qdCX3B,IAAMC,EAAYC,IAAOC,OAAV,KA2BAC,EAJoB,SAAC,GAA4B,IAA1BJ,EAAyB,EAAzBA,SAAaD,EAAY,4BAC7D,OAAO,kBAACE,EAAcF,EAAQC,I,i+CCtBhC,IAAMK,EAAgBT,IAAOC,IAAV,KAqBbS,EAAaV,IAAOC,IAAV,KA2DVU,EAAsB,SAAAR,GAAS,IAAD,EACLA,EAAMS,KAArBC,GADoB,EACxBC,GADwB,EACpBD,MAAME,EADc,EACdA,MAClB,OACI,kBAACL,EAAD,KACI,yBAAKd,UAAU,gBACX,yBAAKoB,IAAKD,EAAOE,IAAG,gBAExB,8BAAOJ,GACP,yBAAKjB,UAAU,aACf,kBAAC,EAAD,CAAQA,UAAU,WAAlB,QACA,kBAAC,EAAD,CAAQA,UAAU,SAASsB,QAASf,EAAMgB,WAA1C,kBA0CGC,EAnCmB,SAAAjB,GAAU,IAAD,EACflB,mBAAmB,IADJ,mBAChCoC,EADgC,KAC1BC,EAD0B,OAETrC,mBAAqB,IAFZ,mBAEhCsC,EAFgC,KAEvBC,EAFuB,KAcvC,OAVAC,qBAAU,YACY,uCAAG,4BAAAC,EAAA,sEC1GlBC,MAAM,+CACRC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MDwGL,OACXG,EADW,OAEjBX,EAAWW,EAAKvB,MAFC,2CAAH,qDAIlBwB,MAEJX,qBAAU,WACNQ,QAAQC,IAAIb,KACb,CAACA,IAEA,kBAACZ,EAAD,KACI,yBAAKb,UAAU,iBAEH2B,EAAQc,KAAI,SAACC,GACT,OACI,kBAAC,EAAD,CAEIC,IAAKD,EAAIxB,GACTF,KAAM0B,EACNnB,UAAW,WACXG,EAAQ,GAAD,mBAAKD,GAAL,CAAUiB,EAAIxB,eE5G1C0B,MAZf,WACE,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,KACI,kBAAC,EAAD,SCAU6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.4d8b7edf.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n} from 'reactstrap';\n\nconst Header = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">Logo</NavbarBrand>\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/\">Home</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/\">Product</NavLink>\n            </NavItem>\n          </Nav>\n            \n          <Nav className=\"mr\" navbar>\n            <NavItem>\n              <NavLink href=\"/\">Login</NavLink>\n            </NavItem>\n          </Nav>        \n          </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default Header;","import React from 'react'\nimport Styled from 'styled-components'\n\nconst StyleLayout = Styled.div`\n    width:100%;\n    float:left;\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n`;\ninterface LayoutProps{\n    children:React.ReactNode;\n}\nconst Layout: React.FC<LayoutProps> = (props) =>{\nreturn <StyleLayout>{props.children}</StyleLayout>\n}\nexport default Layout;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledBtn = styled.button`\n  width: 100%;\n  height: calc(32 / 1440 * 100vw);\n  background: #f1f1f1;\n  border: 0.064vw solid #e2e2e2;\n  border-radius: calc(0.694vw / 2);\n  padding: calc(20 / 1440 * 100vw) auto;\n  margin: calc(5 / 1440 * 100vw) auto;\n  font-size: calc(16 / 1440 * 100vw);\n\n  &:hover {\n    cursor: pointer;\n    background: #757c88;\n    color: #ffffff;\n  }\n`;\n\ninterface BtnProps {\n  children: React.ReactNode;\n  className: string;\n  onClick?: () => void;\n}\n\nconst Button: React.FC<BtnProps> = ({ children, ...props }) => {\n  return <StyledBtn {...props}>{children}</StyledBtn>;\n};\n\nexport default Button;\n","import React, {FC, useState,useEffect} from 'react'\nimport { getProduct } from '../Services/getProduct';\nimport Styled from 'styled-components';\nimport Button from './Button';\n\nconst StyledContent = Styled.div`\n    float: flex;\n    width: 100%;\n    padding:auto;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items:center;\n    box-sizing: border-box;\n    padding-left:calc(30 / 1440 * 100vw);\n    padding-right:calc(30 / 1440 * 100vw);\n    \n\n    & .product-list{\n        display: flex;\n        flex-flow:row wrap;\n        align-item: flex-start;\n        justify-content: space-around;\n        \n    }\n`;\nconst CardStyled = Styled.div`\n  width: calc(250 / 1440 * 100vw);\n  height: calc(400 / 1440 * 100vw);\n  box-sizing: border-box;\n  border: 0.064vw solid #e2e2e2;\n  border-radius: 0.649vw solid #e2e2e2;\n  padding: calc(200px / 100 * 10);\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  justify-content: space-between;\n  overflow: hidden;\n  margin: 0.649vw;\n\n  & .imgContainer {\n    width: 100%;\n    height: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: start;\n    overflow: hidden;\n    margin-bottom: calc(20 / 1440 * 100vw);\n\n    & img {\n      width: 100%;\n    }\n  }\n\n  & span {\n    font-size: calc(16 / 1440 * 100vw);\n  }\n\n  & .btn-group {\n    display: flex;\n    flex-direction: column;\n    margin-top: calc(15 / 1440 * 100vw);\n\n    & .viewBtn {\n      background: #0492c2;\n      color: #fff;\n\n      &:hover {\n        background: #1f456f;\n      }\n    }\n  }\n`;\n\ninterface ContentProps{}\ninterface IProduct{\n    id: string;\n    name: string;\n    image:string;\n}\ninterface CardProps {\n    addToCard: () => void;\n    data: IProduct;\n}\n\nconst Card: FC<CardProps> = props =>{\n    const { id, name, image} = props.data;\n    return (\n        <CardStyled>\n            <div className='imgContainer'>\n                <img src={image} alt={`$[id]- img`} />\n            </div>\n            <span>{name}</span>\n            <div className='btn-group'>\n            <Button className=\"viewBtn\">View</Button>\n            <Button className=\"addBtn\" onClick={props.addToCard}>\n                Add To Card\n            </Button>\n            </div>\n        </CardStyled>\n    );\n}\nconst Content: FC<ContentProps> = props => {\n    const [card, setCard] = useState<string[]>([]);\n    const [product, setProduct] = useState<IProduct[]>([]);\n\n    useEffect(()=>{\n        const fetchProduct = async () =>{\n            const Data = await getProduct();\n            setProduct(Data.data);\n        };\n        fetchProduct();\n    });\n    useEffect(()=>{\n        console.log(card);   \n    }, [card]);\n    return (\n        <StyledContent>\n            <div className='product-list '>\n                {\n                        product.map((pro : IProduct)=>{\n                            return (\n                                <Card \n                                    \n                                    key={pro.id}\n                                    data={pro}\n                                    addToCard={()=>{\n                                    setCard([...card,pro.id]);\n                                }}/>\n                            )\n                        })\n                }  \n</div>\n           \n        </StyledContent>\n    );\n};\nexport default Content;","export const getProduct = () => {\n    return fetch('https://min-shop.herokuapp.com/rest/product')\n        .then(res => res.json())\n        .catch(err => console.log(err)\n        );\n};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport { Layout } from './Components/Layout/Index';\nimport { Content } from './Content/Index';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Layout>\n          <Content/>\n      </Layout>\n    </div>\n \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}